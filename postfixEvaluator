
import java.util.EmptyStackException;
import java.util.Scanner;

//import java.util.NotEnoughException;

import java.util.*;
import java.util.Stack;
import java.util.Scanner;
import java.util.EmptyStackException;

public class PostfixEvaluator {
    private final static char ADD      = '+';
    private final static char SUBTRACT = '-';
    private final static char MULTIPLY = '*';
    private final static char DIVIDE   = '/';
    private final static char MODULUS   = '%';
    private final static char POWER   = '^';
    private final static char unaryMinus   = '~';    
    
    // unaryMinus: e ~ 
    
    private Stack<Integer> stack;

    public PostfixEvaluator() {
        stack = new Stack<Integer>();
    }

	public int evaluate(String expr) {
        int op1, op2, result = 0;
        String token;
        Scanner parser = new Scanner(expr);

        while (parser.hasNext()) {
            token = parser.next();
            boolean isPostfix = false;
            if (isOperator(token)) {
                op2 = stack.pop();
                op1 = stack.pop();
                result = evaluateSingleOperator(token.charAt(0), op1, op2, isPostfix);
                stack.push(result);
            }
            else
                stack.push(Integer.parseInt(token));
        }

        parser.close();
        return (stack.pop());
    }
	
    private boolean isOperator(String token) {
        return ( token.equals("+") || token.equals("-") || 
                 token.equals("*") || token.equals("/") || token.equals("%") || token.equals("^"));
        // OR return ("+-*/".indexOf(token) >= 0);
    }
    
    final String[] equationNameIdentifier = {"Infix","Prefix", "Postfix"};
    String equationState= " equation";
    
    private int evaluateSingleOperator(char operation, int op1, int op2, boolean isPostfix) {
        int result = 0;

        switch (operation) {
            case ADD:
                result = op1 + op2;
                break;
                
            case SUBTRACT:
                result = op1 - op2;
                break;
                
            case MULTIPLY:
                result = op1 * op2;
                break;
                
            case DIVIDE:
                result = op1 / op2;
                break;
            case MODULUS:
                result = op1 % op2;
                break;
            case POWER:
                result = (int)Math.pow(op1, op2);
                break;
            case unaryMinus: 
                result = (int)Math.pow(op1, op2);
        }

        return result;
    } // end of evaluateSingleOperator method
    
} // end of PostfixEvaluator class
    /**
     * Reads and evaluates multiple postfix expressions.
     */
	 
	 
	 
    public static void main(String[] args) throws EmptyStackException{
        String expression, again;
        int result;
    
        Scanner in = new Scanner(System.in);
      
        do
        {  
            PostfixEvaluator evaluator = new PostfixEvaluator();
            
			System.out.println("Enter a valid post-fix expression one token " +
							   "at a time with a space between each token (e.g. 5 4 + 3 2 1 - + *)");
			System.out.println("Each token must be an integer or an operator (+,-,*,/)");
            expression = in.nextLine();
            try {
                result = evaluator.evaluate(expression);
                System.out.println();
                System.out.println("That expression equals " + result);
        		} // end of while loop
        	catch(EmptyStackException e){
        			System.out.print( e.getMessage() + "\nThis is not a postfix equation\n" + "\n");            		
        	} // end of catch exception
            catch(NotEnoughStacksException m) {
    			System.out.print( m.getMessage() + "\nThis is not a postfix equation\n" + "\n");   	        		
        	} // end of catch exception
            
            System.out.print("Evaluate another expression [Y/N]? ");
            again = in.nextLine();
            System.out.println();
        } while (again.equalsIgnoreCase("y"));
        
        in.close();
  } 
}
